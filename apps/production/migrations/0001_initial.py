# Generated by Django 5.1.6 on 2025-04-08 11:26

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('inventory', '0001_initial'),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductionBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_number', models.CharField(default='BATCH-28CCC13E', max_length=50, unique=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('quantity_produced', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_rejected', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('QUALITY_CHECK', 'Quality Check'), ('COMPLETED', 'Completed'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supervisor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_batches', to='accounts.employee')),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_approve_batch', 'Can approve production batch'), ('can_reject_batch', 'Can reject production batch')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_produced', models.PositiveIntegerField()),
                ('quantity_rejected', models.PositiveIntegerField()),
                ('status', models.CharField(max_length=50)),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('production_date', models.DateField(default=django.utils.timezone.now)),
                ('quality_check_results', models.JSONField(default=dict)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historical_data', to='production.productionbatch')),
            ],
            options={
                'verbose_name': 'Historical Data',
                'verbose_name_plural': 'Historical Data',
            },
        ),
        migrations.CreateModel(
            name='ProductionLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('production_type', models.CharField(choices=[('CONTINUOUS', 'Continuous Production'), ('BATCH', 'Batch Production'), ('CUSTOM', 'Custom Production')], default='BATCH', max_length=20)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=100)),
                ('capacity_per_hour', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('optimal_crew_size', models.PositiveIntegerField()),
                ('installation_date', models.DateField()),
                ('last_maintenance_date', models.DateField()),
                ('next_maintenance_date', models.DateField()),
                ('status', models.CharField(choices=[('OPERATIONAL', 'Operational'), ('MAINTENANCE', 'Under Maintenance'), ('BREAKDOWN', 'Breakdown'), ('INACTIVE', 'Inactive')], default='OPERATIONAL', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('supervisor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervised_lines', to='accounts.employee')),
            ],
            options={
                'ordering': ['name'],
                'permissions': [('can_schedule_maintenance', 'Can schedule maintenance'), ('can_modify_capacity', 'Can modify production line capacity')],
            },
        ),
        migrations.CreateModel(
            name='MaintenanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_type', models.CharField(choices=[('PREVENTIVE', 'Preventive Maintenance'), ('CORRECTIVE', 'Corrective Maintenance'), ('EMERGENCY', 'Emergency Maintenance')], max_length=20)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('description', models.TextField()),
                ('parts_replaced', models.TextField(blank=True)),
                ('next_maintenance_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('performed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='maintenance_performed', to='accounts.employee')),
                ('production_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_logs', to='production.productionline')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='ProductionSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('quantity_planned', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('priority', models.IntegerField(choices=[(1, 'Low'), (2, 'Medium'), (3, 'High'), (4, 'Urgent')], default=2)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('DELAYED', 'Delayed')], default='SCHEDULED', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_schedules', to='accounts.employee')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='production_schedules', to='products.product')),
                ('production_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='production.productionline')),
            ],
            options={
                'ordering': ['start_time', '-priority'],
                'permissions': [('can_modify_schedule', 'Can modify production schedule'), ('can_cancel_schedule', 'Can cancel production schedule')],
            },
        ),
        migrations.AddField(
            model_name='productionbatch',
            name='schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='production.productionschedule'),
        ),
        migrations.CreateModel(
            name='QualityCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_date', models.DateTimeField()),
                ('strength_test', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('moisture_content', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('density', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('result', models.CharField(choices=[('PASSED', 'Passed'), ('FAILED', 'Failed'), ('PENDING', 'Pending Review')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quality_checks', to='production.productionbatch')),
                ('inspector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inspections', to='accounts.employee')),
            ],
            options={
                'ordering': ['-check_date'],
                'permissions': [('can_perform_quality_check', 'Can perform quality check'), ('can_approve_quality_check', 'Can approve quality check')],
            },
        ),
        migrations.CreateModel(
            name='EmployeeCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hours_worked', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.employee')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_costs_detail', to='production.productionbatch')),
            ],
            options={
                'verbose_name': 'Employee Cost',
                'verbose_name_plural': 'Employee Costs',
                'unique_together': {('batch', 'employee')},
            },
        ),
        migrations.CreateModel(
            name='BatchMaterialUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_planned', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity_actual', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('wastage', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_usage', to='inventory.rawmaterial')),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.employee')),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='material_usage', to='production.productionbatch')),
            ],
            options={
                'ordering': ['batch', 'material'],
                'unique_together': {('batch', 'material')},
            },
        ),
    ]
